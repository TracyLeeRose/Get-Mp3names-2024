#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <filesystem>
#include <windows.h>
#include <shellapi.h>

namespace fs = std::filesystem;

// by Tracy Rose
// Function to list all MP3 files and write their information to a text file

void listMP3Files(const std::string& path) {
    std::ofstream outFile("Music-list.txt");
    if (!outFile) {
        std::cerr << "Cannot open Music-list.txt for writing.\n";
        return;
    }

    std::vector<std::string> allFiles;         // Tracks all MP3 files
    std::vector<std::string> noDelimiterFiles; // Tracks MP3 files with no delimiter

    try {
        for (const auto& entry : fs::recursive_directory_iterator(path, fs::directory_options::skip_permission_denied)) {
            try {
                if (fs::is_regular_file(entry)) {
                    std::string extension = entry.path().extension().string();
                    std::transform(extension.begin(), extension.end(), extension.begin(), ::tolower); // Convert to lowercase

                    if (extension == ".mp3") {
                        std::string filename = entry.path().filename().string();
                        allFiles.push_back(filename);

                        // Check for delimiter " - "
                        if (filename.find(" - ") == std::string::npos) {
                            noDelimiterFiles.push_back(filename);
                        }
                    }
                }
            }
            catch (const fs::filesystem_error& e) {
                std::cerr << "Error accessing file: " << e.what() << '\n';
            }
        }
    }
    catch (const fs::filesystem_error& e) {
        std::cerr << "Filesystem error: " << e.what() << '\n';
    }

    // Write all MP3 files to the output file
    for (const auto& file : allFiles) {
        outFile << file << "\n";
    }

    // Append the total count of MP3 files
    outFile << "\nTOTAL = " << allFiles.size() << "\n";

    // Add a section for files with no delimiter
    if (!noDelimiterFiles.empty()) {
        outFile << "\n\nFILES WITH NO DELIMITER:\n";
        for (const auto& file : noDelimiterFiles) {
            outFile << file << "\n";
        }
    }

    std::cout << "Processed " << allFiles.size() << " MP3 files.\n";
    if (!noDelimiterFiles.empty()) {
        std::cout << noDelimiterFiles.size() << " files did not contain the delimiter \" - \".\n";
        std::cout << "Check the 'FILES WITH NO DELIMITER' section in Music-list.txt.\n";
    }
}

// Function to sort the file content alphabetically, excluding status lines
void sortFileContent(const std::string& input, const std::string& output) {
    std::ifstream inFile(input);
    if (!inFile) {
        std::cerr << "Cannot open " << input << " for reading.\n";
        return;
    }

    std::vector<std::string> lines;
    std::string line;

    // Read all lines except for the "TOTAL" and "FILES WITH NO DELIMITER" sections
    bool isDelimiterSection = false;
    while (std::getline(inFile, line)) {
        if (line.empty()) continue;

        if (line.find("TOTAL =") == 0) {
            continue; // Skip the TOTAL line
        }

        if (line.find("FILES WITH NO DELIMITER:") == 0) {
            isDelimiterSection = true; // Begin ignoring lines in this section
            continue;
        }

        if (!isDelimiterSection) {
            lines.push_back(line);
        }
    }
    inFile.close();

    std::sort(lines.begin(), lines.end());

    std::ofstream outFile(output);
    if (!outFile) {
        std::cerr << "Cannot open " << output << " for writing.\n";
        return;
    }

    for (const auto& l : lines) {
        outFile << l << "\n";
    }

    outFile << "\nTOTAL = " << lines.size() << "\n"; // Correct total count
    std::cout << "Sorted " << lines.size() << " entries.\n";
}

// Function to open a file with Notepad
void openNotepad(const std::string& filePath) {
    size_t len = filePath.length();
    wchar_t* wFilePath = new wchar_t[len + 1];
    mbstowcs_s(&len, wFilePath, len + 1, filePath.c_str(), _TRUNCATE);
    ShellExecuteW(NULL, L"open", L"notepad.exe", wFilePath, NULL, SW_SHOWNORMAL);
    delete[] wFilePath;
}

int main() {
    std::string path;
    std::cout << "Enter the directory path containing MP3 files: ";
    std::getline(std::cin, path);

    listMP3Files(path);
    sortFileContent("Music-list.txt", "Alphabetized-Music.txt");

    Beep(1000, 500);
    openNotepad("Alphabetized-Music.txt");

    return 0;
}
