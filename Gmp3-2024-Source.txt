#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm> // for std::sort
#include <filesystem> // Include this header for filesystem operations
#include <windows.h>  // For Beep function and system calls
#include <shellapi.h> // For ShellExecute function

namespace fs = std::filesystem; // Use an alias to make it easier to refer to filesystem functions

// Function to list all MP3 files from a directory and write their information to a text file
// By Tracy Rose

void listMP3Files(const std::string& path) {
    std::ofstream outFile("Music-list.txt");
    if (!outFile) {
        std::cerr << "Cannot open Music-list.txt for writing.\n";
        return;
    }

    int totalMP3Files = 0; // Variable to count MP3 files

    try {
        for (const auto& entry : fs::directory_iterator(path)) {
            if (fs::is_regular_file(entry) && entry.path().extension() == ".mp3") {
                totalMP3Files++; // Increment the count each time an MP3 file is found
                std::string filename = entry.path().filename().string();
                size_t dashPos1 = filename.find(" - "); // Find the first occurrence of " - "
                if (dashPos1 != std::string::npos) {
                    std::string songTitle = filename.substr(0, dashPos1); // Extract the artist and title part before the delimiter
                    std::string restOfFilename = filename.substr(dashPos1 + 3); // Extract the file extension after the delimiter
                    outFile << songTitle << " - " << restOfFilename << "\n"; // Write complete information to file
                }
            }
        }
    }
    catch (const fs::filesystem_error& e) {
        std::cerr << "Filesystem error: " << e.what() << '\n';
    }

    // Output the total count of MP3 files after scanning the directory
    if (!outFile.is_open()) {
        std::cerr << "Cannot write to Music-list.txt\n";
        return;
    }
    else {
        outFile << "\nTOTAL = " << totalMP3Files << "\n"; // Append total count to the file
        std::cout << "TOTAL = " << totalMP3Files << std::endl; // Also print it to console for user feedback
    }
}

// Function to sort the cleaned list alphabetically
void sortFileContent(const std::string& input, const std::string& output) {
    std::ifstream inFile(input);
    if (!inFile) {
        std::cerr << "Cannot open Music-list.txt for reading.\n";
        return;
    }

    std::vector<std::string> lines;
    std::string line;
    while (std::getline(inFile, line)) {
        if (!line.empty()) { // Ensure non-empty lines are added to the vector
            lines.push_back(line);
        }
    }

    inFile.close(); // Close the input file after reading

    std::sort(lines.begin(), lines.end());

    std::ofstream outFile(output);
    if (!outFile) {
        std::cerr << "Cannot open Alphabetized-Music.txt for writing.\n";
        return;
    }

    for (const auto& l : lines) {
        outFile << l << "\n";
    }

    // Output the total count to the sorted file
    if (!outFile.is_open()) {
        std::cerr << "Cannot write to Alphabetized-Music.txt\n";
        return;
    }
    else {
        outFile << "\nTOTAL = " << lines.size() - 1 << "\n"; // Append total count to the sorted file
    }
}

// Function to open a file with Notepad
void openNotepad(const std::string& filePath) {
    size_t len = filePath.length();
    wchar_t* wFilePath = new wchar_t[len + 1];
    mbstowcs_s(&len, wFilePath, len + 1, filePath.c_str(), _TRUNCATE); // Safely convert to wide character string
    ShellExecuteW(NULL, L"open", L"notepad.exe", wFilePath, NULL, SW_SHOWNORMAL);
    delete[] wFilePath; // Don't forget to free the allocated memory
}

int main() {
    std::string path;
    std::cout << "Enter the directory path containing MP3 files: ";
    std::getline(std::cin, path);

    listMP3Files(path);
    sortFileContent("Music-list.txt", "Alphabetized-Music.txt");

    // Play a beep sound to alert completion
    Beep(1000, 500); // Frequency: 1000 Hz, Duration: 500 ms

    // Open the sorted file in Notepad
    openNotepad("Alphabetized-Music.txt");

    return 0;
}
